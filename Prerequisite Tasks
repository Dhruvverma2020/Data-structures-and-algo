//{ Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution {
public:
 bool dfsrec(vector<int>adj[],int s,vector<bool>&visited,vector<bool>&rst)
 {
     visited[s]=true;
     rst[s]=true;
     for(auto x:adj[s])
     {
         if(visited[x]==false)
         {
             if(dfsrec(adj,x,visited,rst)==true)
             {
                 return true;
             }
         }
         else if(rst[x]==true)
         {
             return true;
         }
     }
     rst[s]=false;
     return false;
 }
	bool isPossible(int n, vector<pair<int, int> >& prerequisites) 
	{
	    // Code here
	    
	    vector<int>adj[n];
	   for(auto it:prerequisites)
       adj[it.first].push_back(it.second);
	    vector<bool>visited(n,false);
	    vector<bool>rst(n,false);
	    for(int i=0;i<n;i++)
	    {
	        if(visited[i]==false)
	        {
	            if(dfsrec(adj,i,visited,rst)==true)
	            {
	                return false;
	            }
	        }
	    }
	    return true;
	}
};

//{ Driver Code Starts.
int main(){
	int tc;
	cin >> tc;
	while(tc--){
    	int N, P;
        vector<pair<int, int> > prerequisites;
        cin >> N;
        cin >> P;
        for (int i = 0; i < P; ++i) {
            int x, y;
            cin >> x >> y;
            prerequisites.push_back(make_pair(x, y));
        }
        // string s;
        // cin>>s;
        Solution ob;
        if (ob.isPossible(N, prerequisites))
            cout << "Yes";
        else
            cout << "No";
        cout << endl;
	}
	return 0;
}
// } Driver Code Ends
