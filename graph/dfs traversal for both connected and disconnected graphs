#include <iostream>
#include<bits/stdc++.h>
using namespace std;
void addedge(vector<int>adj[],int u,int v)
{
    adj[u].push_back(v);
    adj[v].push_back(u);
}
void printgraph(vector<int>adj[],int v)
{
    for(int i=0;i<v;i++)
    {
        for(int x:adj[i])
        {
            cout<<i<<"->"<<x<<" ";
        }
        cout<<"\n";
    }
}
void bfs(vector<int>adj[],int s,vector<bool>&visited)
{
    visited[s]=true;
    queue<int>q;
    q.push(s);
    while(q.empty()==false)
    {
        int u=q.front();
        q.pop();
       // cout<<u<<" ";
        for(int x:adj[u])
        {
            if(visited[x]==false)
            {
                visited[x]=true;
                q.push(x);
            }
        }
    }
}
int bfsrec(vector<int>adj[],int v)
{
    vector<bool>visited(v+1,false);
    int count=0;
    for(int i=0;i<v;i++)
    {
        if(visited[i]==false)
        {
            count++;
            bfs(adj,i,visited);
        }
    }
    return count;
}
void dfsrec(vector<int>adj[],int s,vector<bool>&visited)
{
    visited[s]=true;
    cout<<s<<" ";
    for(auto v:adj[s])
    {
        if(visited[v]==false)
        {
            dfsrec(adj,v,visited);
        }
    }
}
void dfs(vector<int>adj[],int v)
{
    vector<bool>visited(v+1,false);
    for(int i=0;i<v;i++)
    {
        if(visited[i]==false)
        {
            dfsrec(adj,i,visited);
        }
    }
}
int main()
{
    int v=5;
    vector<int>adj[v];
    addedge(adj,0,1);
    addedge(adj,0,2);
    addedge(adj,1,2);
    addedge(adj,1,3);
    addedge(adj,2,3);
    addedge(adj,2,4);
    addedge(adj,3,4);
    printgraph(adj,v);
    cout<<endl;
    cout<<bfsrec(adj,v);
    cout<<endl;
    dfs(adj,v);
    return 0;
}
