// { Driver Code Starts
// Initial Template for C++

#include <bits/stdc++.h>
using namespace std;


 // } Driver Code Ends
// User function Template for C++

class Solution {
  public:
  bool dfsrec(vector<int> adj[],int s,bool visited[],bool rst[],bool previ[])
  {
      visited[s]=true;
      rst[s]=true;
      for(int v:adj[s])
      {
          if(visited[v]==false)
          {
              if(dfsrec(adj,v,visited,rst,previ)==true)
              {
                return previ[s]==true;
              }
          }
          else if(rst[v]==true)
          {
            return previ[s]=true;
          }
      }
      rst[s]=false;
      return false;
  }
    vector<int> eventualSafeNodes(int v, vector<int>adj[]) 
    {
        vector<int>ans;
        
        bool visited[v];
        bool rst[v];
        bool previ[v];
        for(int i=0;i<v;i++)
        {
            visited[i]=false;
            rst[i]=false;
            ans[i]=false;
        }
        for(int i=0;i<v;i++)
        {
            if(visited[i]==false)
            {
                dfsrec(adj,i,visited,rst,previ);
            }
        }
        for(int i=0;i<v;i++)
        {
            if(!previ[i])
            {
               ans.push_back(i);
            }
        }
        return ans;
    }
};


// { Driver Code Starts.

int main() {
    int t;
    cin >> t;
    while (t--) {

        int V, E;
        cin >> V >> E;
        vector<int> adj[V];

        for (int i = 0; i < E; i++) {
            int u, v;
            cin >> u >> v;
            adj[u].push_back(v);
        }

        Solution obj;
        vector<int> safeNodes = obj.eventualSafeNodes(V, adj);
        for (auto i : safeNodes) {
            cout << i << " ";
        }
        cout << endl;
    }
}
  // } Driver Code Ends
