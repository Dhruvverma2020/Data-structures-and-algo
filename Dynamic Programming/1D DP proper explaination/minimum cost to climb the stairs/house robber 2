 int f(int idx,vector<int>&dp,vector<int>&nums)
    {
        if(idx==0)
        {
            return nums[idx];
        }
        else if(idx<0)
        {
            return 0;
        }
        if(dp[idx]!=-1)
        {
            return dp[idx];
        }
        int pick=nums[idx]+f(idx-2,dp,nums);
        int nonpick=f(idx-1,dp,nums);
        return dp[idx]=max(pick,nonpick);
    }
    int rob(vector<int>& nums) 
    {
        int n=nums.size();
        vector<int>dp(n+1,-1);
        if(n==1)
        return nums[0];
        vector<int> temp1(nums.begin(), nums.end() - 1);
        vector<int> temp2(nums.begin() + 1, nums.end());
        int x=f(n-2,dp,temp1);
        for(int i=0;i<n;i++)
        {
            dp[i]=-1;
        }
        int y=f(n-2,dp,temp2);   
        return max(x,y); 
    }
