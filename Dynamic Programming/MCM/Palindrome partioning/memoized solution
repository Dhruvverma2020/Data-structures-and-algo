static int dp[501][501];
    bool isvalid(string &s, int i, int j) 
    {
      while(i <= j)
      {
            if(s[i++] != s[j--]) return false;
      }
     return true;   
    }

    int solve(string &s,int i,int j,int dp[501][501])
    {
        if(i>=j)
        {
            return 0;
        }
        if(dp[i][j]!=-1)
        {
            return dp[i][j];
        }
        int mini=INT_MAX;
        if(isvalid(s,i,j))
        {
            return 0;
        }
        for(int k=i;k<j;k++)
        {
            int temp=1+solve(s,i,k,dp)+solve(s,k+1,j,dp);
            mini=min(mini,temp);
        }
        return dp[i][j]=mini;
    }
    int palindromicPartition(string s)
    {
        // code here
        int dp[501][501];
        memset(dp,-1,sizeof(dp));
        int n=s.length();
        return solve(s,0,n-1,dp);
    }
