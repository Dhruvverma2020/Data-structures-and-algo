 set<string> st;
	    void solve(string s,string t,int i,int j,string &temp,vector<string> &ans,int count)
	    {
	        if(count==0)
	        {
	            if(st.find(temp)==st.end())
	            {
	                st.insert(temp);
	                ans.push_back(temp);
	            }
	            return;
	        }
	         if(i>=s.size() || j>=t.size()) return;
            for(int r=i;r<s.size();r++)
            {
                for(int c=j;c<t.size();c++)
                {
                    if(s[r]==t[c])
                    {
                        temp.push_back(s[r]);
                        solve(s,t,r+1,c+1,temp,ans,count-1);
                        temp.pop_back();
                    }
                }
            }
	    }
	    int lcs(string s,string t)
	    {
	        int n=s.length();
	        int m=t.length();
	        vector<vector<int>>dp(n+1,vector<int>(m+1,-1));
	        for(int i=0;i<n+1;i++)
	        {
	            for(int j=0;j<m+1;j++)
	            {
	                if(i==0||j==0)
	                {
	                    dp[i][j]=0;
	                }
	            }
	        }
	        for(int i=1;i<n+1;i++)
	        {
	            for(int j=1;j<m+1;j++)
	            {
	                if(s[i-1]==t[j-1])
	                {
	                    dp[i][j]=1+dp[i-1][j-1];
	                }
	                else
	                {
	                    dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
	                }
	            }
	        }
	        return dp[n][m];
	    }
		vector<string> all_longest_common_subsequences(string s, string t)
		{
		    // Code here
		    int cnt=lcs(s,t);
		    vector<string>ans;
		    string temp="";
		    solve(s,t,0,0,temp,ans,cnt);
		    sort(ans.begin(),ans.end());
		    return ans;
		}
