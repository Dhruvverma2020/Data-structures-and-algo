//{ Driver Code Starts
//Initial Template for C++

#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
//User function Template for C++

class Solution
{
public:
    int findShortestPath(vector<vector<int>> &mat)
    {
       // code here
       int n=mat.size();
       int m=mat[0].size();
       vector<vector<int>>vis(n,vector<int>(m,0));
       int dx[]={-1,0,1,0};
       int dy[]={0,1,0,-1};
       for(int i=0;i<n;i++)
       {
           for(int j=0;j<m;j++)
           {
               if(mat[i][j]==0)
               {
                   for(int k=0;k<4;k++)
                   {
                       int nrow=i+dx[k];
                       int ncol=j+dy[k];
                       if(nrow>=0&&nrow<n&&ncol>=0&&ncol<m&&vis[nrow][ncol]==0&&mat[nrow][ncol]==1)
                       {
                           mat[nrow][ncol]=-1;
                       }
                   }
               }
           }
       }
       queue<pair<int,pair<int,int>>>q;
       for(int i=0;i<n;i++)
       {
           if(mat[i][0]==1)
           {
               q.push({0,{i,0}});
               vis[i][0]=1;
           }
       }
       int ans=INT_MAX;
       while(q.empty()==false)
       {
           auto it=q.front();
           q.pop();
           int dist=it.first;
           int r=it.second.first;
           int c=it.second.second;
           if(c == m - 1)
            ans = min(ans,dist+1);
            for(int k=0;k<4;k++) 
            {
                int nx = r + dx[k];
                int ny = c + dy[k];
                
                if(nx>=0 and ny>=0 and nx<n and ny<m and mat[nx][ny] == 1 and !vis[nx][ny]) 
                {
                    vis[nx][ny] = 1;
                    q.push({dist+1,{nx,ny}});
                }
            }
       }
       if(ans==INT_MAX)
       {
           return -1;
       }
       else
       {
           return ans;
       }
    }
};

//{ Driver Code Starts.

int main()
{
    int t;
    cin >> t;
    while (t--)
    {
        int R, C;
        cin >> R >> C;
        vector<vector<int>> mat(R, vector<int>(C));
        for (int i = 0; i < R; i++)
        {
            for (int j = 0; j < C; j++)
            {
                cin >> mat[i][j];
            }
        }

        Solution ob;
        int ans = ob.findShortestPath(mat);
        cout << ans << "\n";
    }
    return 0;
}

// } Driver Code Ends
