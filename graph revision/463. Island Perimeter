class Solution {
public:
    void  dfs(int i,int j,int n,int m,vector<vector<int>>&grid,int &count)
    {
        if(i<0 || i>=n || j<0 || j>=m || grid[i][j] == 0 )
        {
           count++;
          return;
        }
        if(grid[i][j] == -1)
        return;
        
        grid[i][j] = -1;
        
        dfs(i+1,j,n,m,grid,count);
        dfs(i-1,j,n,m,grid,count);
         dfs(i,j+1,n,m,grid,count);
          dfs(i,j-1,n,m,grid,count);
    }
    int islandPerimeter(vector<vector<int>>& grid) 
    {
        int n=grid.size();
        int m=grid[0].size();
        int count=0;
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(grid[i][j]==1)
                {
                 dfs(i,j,n,m,grid,count);
                 return count;
                }
            }
        }
        return count;
    }
};
