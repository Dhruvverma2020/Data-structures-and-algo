The main logic of this question is that first we have to convert the edges into the adjacency list now do bfs traversal to see which vertex is connected to which other one and then check wether vis[destination 
is true or not
class Solution {
public:
    bool validPath(int n, vector<vector<int>>& edges, int source, int destination) 
    {
        vector<int>adj[n];
        int m=edges.size();
        for(int i=0;i<m;i++)
        {
            int u=edges[i][0];
            int v=edges[i][1];
            adj[u].push_back(v);
            adj[v].push_back(u);
        }
        vector<bool>vis(n+1,0);
        vis[source]=true;
        queue<int>q;
        q.push(source);
        while(q.empty()==false)
        {
            int u=q.front();
            q.pop();
            for(auto x:adj[u])
            {
                if(vis[x]==false)
                {
                    vis[x]=true;
                    q.push(x);
                }
            }
        }
        return vis[destination];
    }
};
