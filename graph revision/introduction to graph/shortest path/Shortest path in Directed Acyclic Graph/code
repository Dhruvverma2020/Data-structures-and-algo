void dfsrec(vector<pair<int,int>>adj[],int s,vector<int>&vis,stack<int>&st)
     {
         vis[s]=1;
         for(auto x:adj[s])
         {
             int v=x.first;
             if(!vis[v])
             {
                 dfsrec(adj,v,vis,st);
             }
         }
        st.push(s);
     }
     vector<int> shortestPath(int n,int m, vector<vector<int>>& edges)
     {
        // code here
        vector<pair<int,int>>adj[n];
        for(int i=0;i<m;i++)
        {
            int u=edges[i][0];
            int v=edges[i][1];
            int wt=edges[i][2];
            adj[u].push_back({v,wt});
        }
        vector<int>vis(n,0);
        vector<int>dist(n,INT_MAX);
        stack<int>st;
        for(int i=0;i<n;i++)
        {
            if(!vis[i])
            {
                dfsrec(adj,i,vis,st);
            }
        }
         dist[0]=0;
         while(st.empty()==false)
         {
             int u=st.top();
             st.pop();
             for(auto it:adj[u])
             {
                 int v=it.first;
                 int wt=it.second;
                 if(dist[u]!=INT_MAX)
                 {
                     if(dist[u]+wt<dist[v])
                     {
                       dist[v]=dist[u]+wt;
                     }
                 }
             }
         }
        for(int i = 0;i<n;i++)
        {
            if(dist[i] == INT_MAX)
                dist[i] = -1;
        }
         return dist;
    }
