class Solution {
public:
    int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int k) 
    {
        vector<pair<int,int>>adj[n];
        for(auto it:flights)
        {
           adj[it[0]].push_back({it[1],it[2]});
        }
        queue<pair<int,pair<int,int>>>q;
        q.push({0,{src,0}});
        vector<int>dist(n,1e9);
        dist[src]=0;
        while(q.empty()==false)
        {
            auto it=q.front();
            q.pop();
            int stop=it.first;
            int node=it.second.first;
            int dst=it.second.second;
            if(stop>k)
            {
                continue;
            }
            for(auto iter:adj[node])
            {
                int adjnode=iter.first;
                int edw=iter.second;
                if(dst+edw<dist[adjnode])
                {
                    dist[adjnode]=dst+edw;
                    q.push({stop+1,{adjnode,dst+edw}});
                }
            }
        }
        if(dist[dst]==1e9)
        {
            return -1;
        }
        else
        {
            return dist[dst];
        }
    }
};
