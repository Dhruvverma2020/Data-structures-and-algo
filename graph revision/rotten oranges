//{ Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution 
{
    public:
    //Function to find minimum time required to rot all oranges. 
    int orangesRotting(vector<vector<int>>& grid) 
    {
        // Code here
        int n=grid.size();
        int m=grid[0].size();
        int step=0;
        queue<pair<int,pair<int,int>>>q;
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(grid[i][j]==2)
                {
                    q.push({0,{i,j}});
                }
            }
        }
        int dr[]={-1,0,1,0};
	    int dc[]={0,+1,0,-1};
	    int ans=0;
        while(q.empty()==false)
        {
            auto it =q.front();
            q.pop();
            step=it.first;
            int row=it.second.first;
            int col=it.second.second;
            for(int i=0;i<4;i++)
	        {
	            int nrow=row+dr[i];
	            int ncol=col+dc[i];
	            if(nrow>=0&&nrow<n&&ncol>=0&&ncol<m&&grid[nrow][ncol]==1)
	            {
	                grid[nrow][ncol]=2;
	                q.push({step+1,{nrow,ncol}});
	                ans=max(ans,step+1);
	            }
	        }
        }
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
              if(grid[i][j]==1)
              {
                  return -1;
              }
            }
        } 
        return ans;
        
    }
};

//{ Driver Code Starts.
int main(){
	int tc;
	cin >> tc;
	while(tc--){
		int n, m;
		cin >> n >> m;
		vector<vector<int>>grid(n, vector<int>(m, -1));
		for(int i = 0; i < n; i++){
			for(int j = 0; j < m; j++){
				cin >> grid[i][j];
			}
		}
		Solution obj;
		int ans = obj.orangesRotting(grid);
		cout << ans << "\n";
	}
	return 0;
}
// } Driver Code Ends
