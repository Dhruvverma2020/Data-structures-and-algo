int shortestDistance(int n, int m, vector<vector<int>> a, int x, int y)
    {
        // code here
        if(a[0][0]==0)
        {
            return -1;
        }
        int dr[]={+1,0,-1,0};
	    int dc[]={0,-1,0,1};
        queue<pair<int,pair<int,int>>>q;
        vector<vector<int>>vis(n,vector<int>(m,INT_MAX));
        vis[0][0]=0;
        q.push({0,{0,0}});
        while(q.empty()==false)
        {
            auto it=q.front();
            q.pop();
            int steps=it.first;
            int row=it.second.first;
            int col=it.second.second;
            
	        for(int i=0;i<4;i++)
	        {
	            int nrow=row+dr[i];
	            int ncol=col+dc[i];
	            if(nrow>=0&&nrow<n&&ncol>=0&&ncol<m&&a[nrow][ncol]==1&&steps+1<vis[nrow][ncol]>0)
	            {
	                vis[nrow][ncol]=steps+1;
	                if(nrow==x&&ncol==y)
	                {
	                    return vis[nrow][ncol];
	                }
	                else
	                {
	                   q.push({steps+1,{nrow,ncol}});
	                }
	            }
	        }
        }
        return -1;
    }
