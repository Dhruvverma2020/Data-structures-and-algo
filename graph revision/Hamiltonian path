//{ Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution
{
    public:
    bool dfsrec(vector<int>adj[],int s,vector<int>&vis,int count,int n)
    {
        vis[s]=1;
        count++;
        if(count==n)
        {
            return true;
        }
        for(auto it:adj[s])
        {
            if(!vis[it])
            {
                if(dfsrec(adj,it,vis,count,n))
                {
                    return true;
                }
            }
        }
        count--;
        vis[s]=false;
        return false;
    }
    bool check(int n,int m,vector<vector<int>> edges)
    {
        // code here
        vector<int>adj[n+1];
        for(int i=0;i<m;i++)
        {
            int u=edges[i][0];
            int v=edges[i][1];
            adj[u].push_back(v);
            adj[v].push_back(u);
        }
       
        vector<int>vis(n+1,0);
        for(int i=1;i<n+1;i++)
        {
          if(vis[i]==false)
          {
              if(dfsrec(adj,i,vis,0,n))
              {
                  return true;
              }
          }
        }
        return false;
    }
};
 

//{ Driver Code Starts.
int main()
{
	int t;
	cin>>t;
	while(t--){
    	int N,M,X,Y;
    	cin>>N>>M;
    	vector<vector<int>> Edges;
    	for(int i=0;i<M;i++)
    	{
    		cin>>X>>Y;
    		Edges.push_back({X,Y});
    	}
    	Solution obj;
    	if(obj.check(N,M,Edges)){
    		cout<<"1"<<endl;
    	}
    	else
    	cout<<"0"<<endl;
	}
}
// } Driver Code Ends
