//{ Driver Code Starts
// Initial Template for C++

#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
// User function Template for C++
class Solution {
  public:
     void dfsrec( vector<pair<int,int>>adj[],int s,vector<int>&vis,stack<int>&st)
     {
         vis[s]=1;
         for(auto x:adj[s])
         {
             int v=x.first;
             if(!vis[v])
             {
                 dfsrec(adj,v,vis,st);
             }
         }
         st.push(s);
     }
     vector<int> shortestPath(int n,int m, vector<vector<int>>& edges)
     {
        // code here
        vector<pair<int,int>>adj[n];
        for(int i=0;i<m;i++)
        {
            int u=edges[i][0];
            int v=edges[i][1];
            int wt=edges[i][2];
            adj[u].push_back({v,wt});
        }
        vector<int>vis(n,0);
        stack<int>st;
        for(int i=0;i<n;i++)
        {
            if(!vis[i])
            {
                dfsrec(adj,i,vis,st);
            }
        }
        vector<int>dist(n,INT_MAX);
        dist[0]=0;
        while(st.empty()==false)
        {
            int u=st.top();
            st.pop();
            for(auto it:adj[u])
            {
                int v=it.first;
                int wt=it.second;
                 if(dist[u] != INT_MAX)
              {   
                if(dist[u]+wt<dist[v])
                {
                    dist[v]=dist[u]+wt;
                }
              }
            }
        }
        for(int i = 0; i < n; i++)
        {
            if(dist[i] == INT_MAX)
                dist[i] = -1;
        }
        return dist;
    }
};


//{ Driver Code Starts.
int main() {
    int t;
    cin >> t;
    while (t--) {
        int n, m;
        cin >> n >> m;
        vector<vector<int>> edges;
        for(int i=0; i<m; ++i){
            vector<int> temp;
            for(int j=0; j<3; ++j){
                int x; cin>>x;
                temp.push_back(x);
            }
            edges.push_back(temp);
        }
        Solution obj;
        vector<int> res = obj.shortestPath(n, m, edges);
        for (auto x : res) {
            cout << x << " ";
        }
        cout << "\n";
    }
}

// } Driver Code Ends
