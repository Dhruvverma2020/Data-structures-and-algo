void solve(int idx,vector<vector<char>>&v,vector<char>&output,int n,string s)
    {
        if(idx<n)
        {
            output.push_back(s[idx]);
            v.push_back(output);
            solve(idx+1,v,output,n,s);
            output.pop_back();
            solve(idx+1,v,output,n,s);
        }
    }
    bool isValid(string s)
   {
      int n = s.size();
      if(s[n-1]=='a' || s[n-1]=='e' || s[n-1]=='i'|| s[n-1]=='o'|| s[n-1]=='u') 
        return false;
      if(s[0]!='a' && s[0]!='e' && s[0]!='i' && s[0]!='o' && s[0]!='u') 
        return false;
        
      return true;
      
   }
    set<string> allPossibleSubsequences(string s) 
    {
        // code here
        int n=s.length();
        vector<vector<char>>v;
        vector<char>output;
        solve(0,v,output,n,s);
        set<string>st;
        for(int i=0;i<v.size();i++)
        {
            string temp="";
            for(int j=0;j<v[i].size();j++)
            {
                temp+=v[i][j];
            }
            if(isValid(temp))
            {
                st.insert(temp);
            }
        }
        return st;
    }
