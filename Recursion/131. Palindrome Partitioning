class Solution {
public:
    bool ispalindrome(string s,int start,int end)
    {
        while(start<=end)
        {
            if(s[start]!=s[end])
                return false;
            start++;
            end--;
        }
        return true;
    }
    void solve(int idx,vector<string>&path,vector<vector<string>>&res,string s)
    {
      if(idx==s.length())
      {
          res.push_back(path);
          return;
      }
      for(int i=idx;i<s.length();i++)
      {
          if(ispalindrome(s,idx,i))
         {
          path.push_back(s.substr(idx,i-idx+1));
          solve(i+1,path,res,s);
          path.pop_back();
         }
      }
    }
    vector<vector<string>> partition(string s) 
    {
     vector<vector<string>>res;
     vector<string>path;
     //int n=s.size();
     int idx=0;
     solve(idx,path,res,s);
     return res;
    }
};
