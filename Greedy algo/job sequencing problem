bool static myComp(Job a, Job b)
    {
        return a.profit>b.profit;
    }
    vector<int> JobScheduling(Job arr[], int n) 
    { 
        // your code here
         sort(arr, arr+n, myComp);
        
        //find maximum deadline
        int maxDead=arr[0].dead;
        for(int i=1;i<n;i++){
            maxDead=max(maxDead, arr[i].dead);
        }
        
        //insert -1 in slot[]
        int slot[maxDead+1];
        for(int i=0;i<=maxDead;i++){
            slot[i]=-1;
        }
        
        //finding maximum profit and no. of jobs that we can do 
        
        int countJobs=0, maxProfit=0;
        
        for(int i=0;i<n;i++){
            for(int j=arr[i].dead;j>0;j--){
                if(slot[j]==-1){
                    slot[j]=i;
                    countJobs++;
                    maxProfit= maxProfit+arr[i].profit;
                    break;
                }
            }
        }
        
        //retruning the answer
        vector<int>ans;
        ans.push_back(countJobs);
        ans.push_back(maxProfit);
        return ans;
        
    } 
