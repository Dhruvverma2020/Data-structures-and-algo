/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode*reversal(ListNode*head)
    {
        ListNode*nh=NULL;
        while(head!=NULL)
        {
            ListNode*curr=head->next;
            head->next=nh;
            nh=head;
            head=curr;
        }
        return nh;
    }
    bool isPalindrome(ListNode* head)
    {
        if(head==NULL||head->next==NULL)
        {
            return true;
        }
       ListNode*fast=head;
       ListNode*slow=head;
       while(fast!=NULL&&fast->next!=NULL)
       {
           fast=fast->next->next;
           slow=slow->next;
       } 
       slow=reversal(slow);
       while(slow!=NULL)
       {
           if(head->val!=slow->val)
           {
               return false;
           }
           head=head->next;
           slow=slow->next;
       }
       return true;
    }
};
